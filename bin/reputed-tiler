#!/bin/bash
# vim:tw=0:ts=2:sw=2:et:ft=sh:

# [lb]: quicktile broken in tara/bionic/18.04:
#
#   https://github.com/ssokolow/quicktile/issues/95
#
# Fortunately, I found a very capable, hackable replacement.
#
# - "Crude quarter tiling tool"
#
#   https://gist.github.com/peteruithoven/db0cba0b0849c8cb5e267f6e75126304

# ***

DEBUGLOG=${DEBUGLOG:-false}
# DEVS: Uncomment to create a debug log.
#   Or run: `DEBUGLOG=true reputated-tiler <dir>`
#DEBUGLOG=true

# DEVS: To generate a temporary pathname, try:
#   mktemp -du
# Here we just hardcode a path, because this feature is
# not really used, so this path does not really matter.
LOGFILE="/tmp/reputed-tiler-tmp.LAcwQ6zU4P"
${DEBUGLOG} && echo -e "Logging to:\n  ${LOGFILE}"

source "${HOME}/.fries/lib/logger.sh"

log () {
  ${DEBUGLOG} && debug "$@" >> ${LOGFILE}
}

# ***

before_command () {
  FRIES__CMDNAME="reputed-tiler"
  FRIES__VERSION=0.0.1

  ORIG_OFFSET_GEOM=""
  MOVE_OFFSET_GEOM=""
  NEXT_REPEAT_NUMB="0"
}

after_command () {
  unset FRIES__CMDNAME
  unset FRIES__VERSION

  unset ORIG_OFFSET_GEOM
  unset MOVE_OFFSET_GEOM
  unset NEXT_REPEAT_NUMB
}

print_version_and_exit () {
  # Use hard coded name, not $0, which is 'bash' when file is sourced.
  >&2 echo "${FRIES__CMDNAME} version ${FRIES__VERSION}"
  exit 0
}

print_help_and_exit () {
  >&2 echo "Usage: ${FRIES__CMDNAME} [-v|--version] [-h|--help] <name>"
  >&2 echo "See \`man ${FRIES__CMDNAME}\` for more help"
  exit 0
}

parse_first_positional () {
  local first_one=''
  local skip_opts=false
  while [[ "$1" != '' ]]; do
    if [[ "$1" == '--' ]]; then
      skip_opts=true
      shift
      continue
    elif ! ${skip_opts}; then
      case $1 in
        -v)
          print_version_and_exit
          ;;
        --version)
          print_version_and_exit
          ;;
        -h)
          print_help_and_exit
          ;;
        --help)
          print_help_and_exit
          ;;
      esac
    fi
    if [[ -z ${first_one} ]]; then
      first_one=$1
    fi
    shift
  done
  if [[ -z ${first_one} ]]; then
    >&2 echo 'Missing one of: left|up|right|down'
    exit 2
  fi
  echo "${first_one}"
}

# ***

must_be_known_direction () {
  local direction
  direction="$1"
  if [[ "${direction}" =~ ^(l|left)$ ]]; then
    echo "left"
  elif [[ "${direction}" =~ ^(t|top|u|up|upper)$ ]]; then
    echo "top"
  elif [[ "${direction}" =~ ^(r|right)$ ]]; then
    echo "right"
  elif [[ "${direction}" =~ ^(b|bottom|d|down|lower)$ ]]; then
    echo "bottom"
  else
    NEXT_REPEAT_NUMB="0"
    if [[ "${direction}" =~ ^(ul|upleft|upperleft|tl|topleft)$ ]]; then
      echo "topleft"
    elif [[ "${direction}" =~ ^(ur|upright|upperright|tr|topright)$ ]]; then
      echo "topright"
    elif [[ "${direction}" =~ ^(dr|downright|lr|lowerright|br|bottomright)$ ]]; then
      echo "bottomright"
    elif [[ "${direction}" =~ ^(dl|downleft|ll|lowerleft|bl|bottomleft)$ ]]; then
      echo "bottomleft"
    else
      >&2 echo "Unrecognized direction: “${1}”"
      exit 2
    fi
  fi
}

# ***

active_window_offset_geom () {
  # [lb]: MAYBE/2019-01-04: Will "Position" always have "screen" ending?
  #
  #   $ xdotool getwindowfocus getwindowgeometry
  #   Window 54908756
  #     Position: 332,234 (screen: 0)
  #     Geometry: 1334x529

  # Use either xdotool or xwininfo to get the active window's digits, e.g.,
  #
  #   xdotool getwindowfocus getwindowgeometry
  #
  # or
  #
  #   xwininfo -id $(xdotool getactivewindow)
  #
  # See also general window details:
  #
  #   wmctrl -l -p -G -x

  local OLD_IFS=$IFS

  # ***

  local position=()
  local position_xy
  position_xy=$( \
    xdotool getwindowfocus getwindowgeometry | \
      grep "^  Position:" | \
      sed "s%^  Position: \([^ ]\+\) .*%\1%" \
  )
  IFS=','
  read -ra position <<< ${position_xy}

  # ***

  local geometry=()
  local geometry_wh
  geometry_wh="$( \
    xdotool getwindowfocus getwindowgeometry | \
      grep "^  Geometry:" | \
      sed "s%^  Geometry: \(.*\)%\1%" \
  )"
  IFS='x'
  read -ra geometry <<< ${geometry_wh}

  # ***

  IFS=$OLD_IFS

  # ***

  local offset_geom
  offset_geom="${position[0]},${position[1]},${geometry[0]},${geometry[1]}"
  log "active_window_offset_geom: offset_geom: ${offset_geom}"
  echo "${offset_geom}"
}

# ***

read_last_used_direction () {
  local direction="$1"
  # Look for the last command's dropping.
  local droppingf="${HOME}/.cache/${FRIES__CMDNAME}/cycles/${direction}"
  log "droppingf: ${droppingf}"
  [[ -f "${droppingf}" ]] && log "  >> $(cat ${droppingf})"
  if [[ -f "${droppingf}" ]]; then
    local PARTS=()
    local OLD_IFS=$IFS
    IFS=' '
    read -ra PARTS <<< $(cat "${droppingf}")
    IFS=$OLD_IFS

    log "PARTS[0]: ${PARTS[0]}"
    log "PARTS[1]: ${PARTS[1]}"
    log "PARTS[2]: ${PARTS[2]}"
    log "PARTS[3]: ${PARTS[3]}"

    if [[ "${PARTS[1]}" -gt $(date -u '+%s' -d'1 minute ago') ]]; then
      local was_offsetgeo
      was_offsetgeo="${PARTS[2]}"
      log "was_offsetgeo: ${was_offsetgeo}"

      local cur_offsetgeo
      cur_offsetgeo="$(active_window_offset_geom)"
      log "cur_offsetgeo: ${cur_offsetgeo}"

      if [[ "${was_offsetgeo}" == "${cur_offsetgeo}" ]]; then
        NEXT_REPEAT_NUMB="$(( ${PARTS[0]} + 1 ))"
        log "NEXT_REPEAT_NUMB++: ${NEXT_REPEAT_NUMB}"

        ORIG_OFFSET_GEOM="${PARTS[3]}"
      fi
    fi
  fi
  if [[ -z "${ORIG_OFFSET_GEOM}" ]]; then
    # assert: [[ ${NEXT_REPEAT_NUMB} -eq 0 ]]
    ORIG_OFFSET_GEOM="$(active_window_offset_geom)"
  fi
  log "read_last_used_direction: ORIG_OFFSET_GEOM: ${ORIG_OFFSET_GEOM}"
  log "read_last_used_direction: NEXT_REPEAT_NUMB: ${NEXT_REPEAT_NUMB}"
}

record_last_used_direction () {
  local direction="$1"

  # Ensure the directory exists, e.g., ~/.cache/reputed-tiler
  /bin/mkdir -p ${HOME}/.cache/${FRIES__CMDNAME}/cycles

  # The offset and geometry we set may have shifted, depending on what else
  # is occupying the desktop, so don't use the result of determine_offsetgeo,
  # but refresh the actual window offset and geometry.
  #sleep 0.1s
  local offsetgeo
  offsetgeo="$(active_window_offset_geom)"

  log "record_last_used_direction: ORIG_OFFSET_GEOM: ${ORIG_OFFSET_GEOM}"
  log "record_last_used_direction: NEXT_REPEAT_NUMB: ${NEXT_REPEAT_NUMB}"

  # Leave a command dropping.
  echo -e "${NEXT_REPEAT_NUMB} $(date -u '+%s') ${offsetgeo} ${ORIG_OFFSET_GEOM}" > ${HOME}/.cache/${FRIES__CMDNAME}/cycles/${direction}
}

# ***

maybe_unset_maximized () {
  # When a window is maximized:
  #
  #   $ xprop -name 'abc' | grep _NET_WM_STATE
  #   _NET_WM_STATE(ATOM) = _NET_WM_STATE_MAXIMIZED_HORZ, _NET_WM_STATE_MAXIMIZED_VERT, _NET_WM_STATE_STICKY
  #
  # When not maximized:
  #
  #   $ xprop -name 'abc' | grep _NET_WM_STATE
  #   _NET_WM_STATE(ATOM) = _NET_WM_STATE_STICKY
  if $(xprop -id $(xdotool getactivewindow) | grep "_NET_WM_STATE.*MAXIMIZED" >/dev/null 2>&1); then
    # In case window is tiled by window manager, disable tilingg, for our reposition to work.
    wmctrl -r :ACTIVE: -b remove,maximized_vert
    # Wait for transition
    sleep 0.1s
  fi
}

# ***

determine_offsetgeo () {
  local direction="$1"

  MARGIN_TOP=0
  MARGIN_RIGHT=0
  MARGIN_BOTTOM=0
  MARGIN_LEFT=0

  # Get Desktop info.
  # We could just get the first line:
  #   INFO=$(wmctrl -d | head -1)
  # But it seems more legit to get the current desktop's info
  # (even though they should all be the same, I'd assume).
  INFO=$(wmctrl -d | grep "\* DG")

  # Parse desktop size.
  [[ $INFO =~ 'DG: '([0-9]+)'x'([0-9]+) ]]
  WIDTH=${BASH_REMATCH[1]}
  HEIGHT=${BASH_REMATCH[2]}

  # Available width height, and offsets see: $ wmctrl -d
  [[ $INFO =~ 'WA: '([0-9]+)','([0-9]+)' '([0-9]+)'x'([0-9]+) ]]
  OFFSET_X=${BASH_REMATCH[1]}
  OFFSET_Y=${BASH_REMATCH[2]}
  AV_WIDTH=${BASH_REMATCH[3]}
  AV_HEIGHT=${BASH_REMATCH[4]}

  log "D: ${WIDTH} x ${HEIGHT} / X,Y: ${OFFSET_X},${OFFSET_Y} / AV: ${AV_WIDTH} x ${AV_HEIGHT}"

  X_LEFT=$((0-($MARGIN_RIGHT+$OFFSET_X)))
  X_CENTER=$(($AV_WIDTH/2+$MARGIN_RIGHT+$MARGIN_LEFT))
  X_THIRD=$(($AV_WIDTH/3+$MARGIN_RIGHT+$MARGIN_LEFT))
  X_TWOTHIRDS=$((2*($AV_WIDTH/3)+$MARGIN_RIGHT+$MARGIN_LEFT))
  X_ONEFOURTH=$((1*($AV_WIDTH/4)+$MARGIN_RIGHT+$MARGIN_LEFT))
  X_THREEFOURTHS=$((3*($AV_WIDTH/4)+$MARGIN_RIGHT+$MARGIN_LEFT))
  HALF_WIDTH=$X_CENTER
  THIRD_WIDTH=$X_THIRD
  TWOTHIRDS_WIDTH=$X_TWOTHIRDS
  THREEFOURTHS_WIDTH=$X_THREEFOURTHS

  Y_TOP=$((0-($MARGIN_TOP-$OFFSET_Y)))
  Y_CENTER=$(($Y_TOP+$HEIGHT/2))
  Y_THIRD=$(($Y_TOP+$HEIGHT/3))
  Y_TWOTHIRDS=$(($Y_TOP+2*($HEIGHT/3)))
  Y_ONEFOURTH=$(($Y_TOP+1*($HEIGHT/4)))
  Y_THREEFOURTHS=$(($Y_TOP+3*($HEIGHT/4)))
  HALF_HEIGHT=$(($AV_HEIGHT/2+$MARGIN_TOP+$MARGIN_BOTTOM))
  THIRD_HEIGHT=$(($AV_HEIGHT/3+$MARGIN_TOP+$MARGIN_BOTTOM))
  TWOTHIRDS_HEIGHT=$((2*($AV_HEIGHT/3)+$MARGIN_TOP+$MARGIN_BOTTOM))
  THREEFOURTHS_HEIGHT=$((3*($AV_HEIGHT/4)+$MARGIN_TOP+$MARGIN_BOTTOM))

  QUARTER_SIZE=$HALF_WIDTH,$HALF_HEIGHT
  TALLHALF_SIZE=$AV_WIDTH,$HALF_HEIGHT
  WIDEHALF_SIZE=$HALF_WIDTH,$AV_HEIGHT
  TALLTHIRD_SIZE=$AV_WIDTH,$THIRD_HEIGHT
  WIDETHIRD_SIZE=$THIRD_WIDTH,$AV_HEIGHT
  TALLTHREEFOURTHS_SIZE=$AV_WIDTH,$THREEFOURTHS_HEIGHT
  WIDETHREEFOURTHS_SIZE=$THREEFOURTHS_WIDTH,$AV_HEIGHT

  log "X_LEFT: ${X_LEFT} / X_CENTER: ${X_CENTER} / Y_TOP: ${Y_TOP} / Y_CENTER: ${Y_CENTER}"
  log "QUARTER_SIZE: ${QUARTER_SIZE}"

  local to_offset_x="${X_LEFT}"
  local to_offset_y="${Y_TOP}"
  local to_size="${QUARTER_SIZE}"

  case "${direction}" in
    left)
      case "${NEXT_REPEAT_NUMB}" in
        "1")
          to_size="${WIDETHIRD_SIZE}"
          ;;
        "3")
          to_offset_y="${Y_CENTER}"
          ;;
        "4")
          to_size="${WIDETHREEFOURTHS_SIZE}"
          ;;
        *)
          to_size="${WIDEHALF_SIZE}"
          ;;
      esac
      ;;
    top)
      case "${NEXT_REPEAT_NUMB}" in
        "1")
          to_size="${TALLTHIRD_SIZE}"
          ;;
        "3")
          to_offset_x="${X_CENTER}"
          ;;
        "4")
          to_size="${TALLTHREEFOURTHS_SIZE}"
          ;;
        *)
          to_size="${TALLHALF_SIZE}"
          ;;
      esac
      ;;
    right)
      to_offset_x="${X_CENTER}"
      case "${NEXT_REPEAT_NUMB}" in
        "1")
          to_offset_x="${X_TWOTHIRDS}"
          to_size="${WIDETHIRD_SIZE}"
          ;;
        "3")
          to_offset_y="${Y_CENTER}"
          ;;
        "4")
          to_offset_x="${X_ONEFOURTH}"
          to_size="${WIDETHREEFOURTHS_SIZE}"
          ;;
        *)
          to_size="${WIDEHALF_SIZE}"
          ;;
      esac
      ;;
    bottom)
      to_offset_y="${Y_CENTER}"
      case "${NEXT_REPEAT_NUMB}" in
        "1")
          to_offset_y="${Y_TWOTHIRDS}"
          to_size="${TALLTHIRD_SIZE}"
          ;;
        "3")
          to_offset_x="${X_CENTER}"
          ;;
        "4")
          to_offset_y="${Y_ONEFOURTH}"
          to_size="${TALLTHREEFOURTHS_SIZE}"
          ;;
        *)
          to_size="${TALLHALF_SIZE}"
          ;;
      esac
      ;;

    # ***
    topleft)
      to_offset_x="${X_LEFT}"
      to_offset_y="${Y_TOP}"
      ;;
    topright)
      to_offset_x="${X_CENTER}"
      to_offset_y="${Y_TOP}"
      ;;
    bottomright)
      to_offset_x="${X_CENTER}"
      to_offset_y="${Y_CENTER}"
      ;;
    bottomleft)
      to_offset_x="${X_LEFT}"
      to_offset_y="${Y_CENTER}"
      ;;
    # ***
    *)
      # Unreachable, because checked earlier, but included for completeness.
      >&2 echo "Unrecognized direction: “${direction}”"
      exit 2
      ;;
  esac

  case "${NEXT_REPEAT_NUMB}" in
    "1")
      # Third size, either tall, or wide.
      MOVE_OFFSET_GEOM="${to_offset_x},${to_offset_y},${to_size}"
      ;;
    "2")
      MOVE_OFFSET_GEOM="${to_offset_x},${to_offset_y},${QUARTER_SIZE}"
      ;;
    "3")
      MOVE_OFFSET_GEOM="${to_offset_x},${to_offset_y},${QUARTER_SIZE}"
      ;;
    "4")
      # Three-fourths size, either tall, or wide.
      MOVE_OFFSET_GEOM="${to_offset_x},${to_offset_y},${to_size}"
      ;;
    "5")
      # [lb]: FIXME/2019-01-04: This is specific to my T480, deal.
      #   Includes 6 pixel left margin, and 56 pixel top margin.
      MOVE_OFFSET_GEOM="320,82,998,835"
      ;;
    "6")
      MOVE_OFFSET_GEOM="${ORIG_OFFSET_GEOM}"
      ;;
    "0")
      ;&
    *)
      # 0, or greater than number in cycle.
      MOVE_OFFSET_GEOM="${to_offset_x},${to_offset_y},${to_size}"
      NEXT_REPEAT_NUMB=0
      ;;
  esac

  log "MOVE_OFFSET_GEOM: ${MOVE_OFFSET_GEOM}"
}

# ***

reputed-tiler () {
  # Note: `local var=$(cmd)` always returns local's status of 0, so
  #       declare first, and then set it, as two separate operations.
  local direction
  direction=$(parse_first_positional "${@}") || return $?

  # First positional argument is empty if command already handled, e.g., -v, or -h, etc.
  [[ -z ${direction} ]] && return

  # Shake off ${direction}. Remainder is optional... and not used.
  shift

  direction="$(must_be_known_direction "${direction}")"

  read_last_used_direction "${direction}"
  log "NEXT_REPEAT_NUMB: ${NEXT_REPEAT_NUMB}"

  determine_offsetgeo "${direction}"
  log "MOVE_OFFSET_GEOM/2: ${MOVE_OFFSET_GEOM}"

  if [[ -n ${MOVE_OFFSET_GEOM} ]]; then
    maybe_unset_maximized
    CMD="wmctrl -r :ACTIVE: -e 0,${MOVE_OFFSET_GEOM}"
    log "CMD: ${CMD}"
    eval $($CMD)
  fi

  record_last_used_direction "${direction}"
}

# ***

main () {
  log
  before_command
  if [[ ${BASH_SOURCE[0]} != "$0" ]]; then
    export -f reputed-tiler
  else
    reputed-tiler "${@}"
  fi
  after_command
}

main "${@}"

